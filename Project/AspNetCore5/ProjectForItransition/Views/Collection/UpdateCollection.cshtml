@model ProjectForItransition.ViewModels.Collection.UpdateCollectionViewModel

@inject IViewLocalizer Localizer

@{
    ViewData["Title"] = Localizer["Title"];
}
<div class="row col-12">
    <form method="post" class="col-12" asp-action="UpdateCollection" asp-controller="Collection" enctype="multipart/form-data">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        @if (!string.IsNullOrEmpty(Model.ErrorMessage))
        {
            <div class="text-danger">@Model.ErrorMessage</div>
        }
        <input type="hidden" asp-for="UserName" value="@Model.Collection.UserName" />
        <input type="hidden" name="CollectionId" value="@Model.Collection.Id" />
        <div class="row mt-4">
            <div class="col-md-9 mb-3">
                <div class="row">
                    <h1 class="text-center col-12 mb-4">@Localizer["UpdateCollection"]</h1>
                    <div class="form-group col-12 row">
                        <label asp-for="Name" class="col-5 col-sm-4 col-form-label">@Localizer["NameCollection"]: </label>
                        <input type="text" asp-for="Name" class="form-control col-7 col-sm-8" value="@Model.Collection.Name" autocomplete="off" />
                        <span class="col-5 col-sm-4"></span>
                        <span asp-validation-for="Name" class="text-danger col-7 col-sm-8"></span>
                    </div>
                </div>
                <div class="row">
                    <div class="form-group col-12 row">
                        <label class="col-form-label col-5 col-sm-4">@Localizer["Topic"]: </label>
                        <div class="col-7 col-sm-8 pl-0 pr-0">
                            <select name="Topic" class="select custom-select">
                                @foreach (var item in Enum.GetValues(typeof(Topic)))
                                {
                                    if ((Topic)item == Model.Collection.Topic)
                                    {
                                        <option value="@item" selected>@item</option>
                                    }
                                    else
                                    {
                                        <option value="@item">@item</option>
                                    }
                                }
                            </select>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3 mb-3">
                <div id="dropZoneUpdate" onclick="fileUpload.click()" ondrop="dropHandler(event, fileUploadUpdate)" ondragover="dragOverHandler(event)" ondragleave="dragLeaveHandler(event)">
                    <div id="dropUpdate" class="text-center">
                        @{
                            @if (Model.Collection.Image != null)
                            {
                                var url = Cloudinary.Api.UrlImgUp.Format("png")
                                           .Transform(new Transformation().Width(300).Height(200).Crop("fill").Gravity("north"));
                                @Html.Raw(url.BuildImageTag(Model.Collection.Image.PublicId, new StringDictionary("alt=Image collection", "class= card-img-top")))
                            }
                            else
                            {
                                var url = Cloudinary.Api.UrlImgUp.Format("png")
                                              .Transform(new Transformation().Width(300).Height(200).Crop("fill").Gravity("north").Effect("sepia").Chain());
                                @Html.Raw(url.BuildImageTag("olbzel1gbnvmqbyjgnyj", new StringDictionary("alt=Image collection", "class= card-img-top")))
                            }
                        }
                    </div>
                </div>
                <input id="fileUploadUpdate" onclick="fileUpload.click()" style="display:none" type="file" name="ImageInput" multiple accept="image/gif, image/jpeg, image/png">
            </div>
        </div>
        <label>@Localizer["Description"]</label>
        <textarea name="Description" class="form-control" rows="10">@Model.Collection.Description</textarea>
        <div id="NameElements"></div>
        <div id="SelectElements"></div>
        <br />
        <div class="row">
            <div class="col-md-4 mt-1">
                <input type="button" class="btn btn-primary col-12" onclick="appendElement('NameElements', '')" value="@Localizer["Element"]" />
            </div>
            <div class="col-md-4 mt-1">
                <input type="button" class="btn btn-primary col-12" onclick="appendSelect('SelectElements','')" value="@Localizer["Select"]" />
            </div>
            <div class="col-md-4 mt-1">
                <input type="submit" class="btn btn-success col-12" value="@Localizer["Update"]" />
            </div>
        </div>
    </form>
</div>
<script>
    function appendSelect(element, name, options) {
        let div = document.createElement("div");
        div.classList.add('row');
        div.classList.add('mt-2');
        div.innerHTML = "<input type=\"hidden\" name=\"CountSelect\" value=\"1\" /> " +
            "<label class=\"col-6 col-md-3 mt-2\">@Localizer["FieldName"]: </label>" +
            "<input type=\"text\" name=\"SelectField\" class=\"form-control col-6 col-md-3\" autocomplete=\"off\" value=\"" + name + "\"/> " +
            "<label class=\"col-6 col-md-3 mt-2\">@Localizer["SelectElement"]: </label>" +
            "<input type=\"text\" name=\"Options\" class=\"form-control col-5 col-md-2\" autocomplete=\"off\"/> " +
            "<div class=\"col-1 col-md-1 text-md-right\"><button class=\"btn pl-0 text-danger\" onclick='deleteElement(event)'>X</button></div>" +
            "<div class=\"col-12 p-0\"><div class=\"row\"><div class=\"row col-12 p-0\"><div class=\"col-6 col-md-9\"></div>" +
            "<div class=\"col-6 col-md-2 p-0 text-md-center\"><input type=\"button\" class=\"btn btn-info mt-1 col-4\" onclick='addInput(event)' value=\"+\" /></div></div></div></div>";
        document.getElementById(element).appendChild(div);
    }

    let html = "";
    @for (int i = 0; i < Model.Collection.SelectElements.Count(); i++)
    {
        @:html = "<input type=\"text\" name=\"Options\" class=\"form-control col-5 col-md-2\" value=\"@Model.Collection.SelectElements[i].OptionElements[0].Value\" autocomplete=\"off\"/> " +
        @:"<div class=\"col-1 col-md-1 text-md-right\"><button class=\"btn pl-0 text-danger\" onclick='deleteElement(event)'>X</button></div>";
        @:html += "<div class=\"col-12 p-0\"><div class=\"row\">";
        @for (int j = 1; j < Model.Collection.SelectElements[i].OptionElements.Count(); j++)
        {
            string option = Model.Collection.SelectElements[i].OptionElements[j].Value;
            @:html += "<div class=\"row col-12 p-0\"><div class=\"col-6 col-md-9\"></div>" +
            @:"<input type =\"text\" name=\"Options\" class=\"form-control mt-1 col-5 col-md-2\" autocomplete=\"off\" value=\"@option\"/>" +
            @:"<div class=\"col-1 col-md-1 text-center\"><button class=\"btn pl-0 text-danger\" onclick='deleteElement(event)'>x</button></div></div>";

        }
        @:html += "</div></div></div><div class=\"col-12 p-0\"><div class=\"row\"><div class=\"row col-12 p-0\"><div class=\"col-6 col-md-9\">" +
        @:"</div><div class=\"col-6 col-md-2 p-0 text-md-center\">" +
        @:"<input type=\"button\" class=\"btn btn-info mt-1 col-4\" onclick='addInput(event)' value=\"+\" /></div></div></div></div>";

        @: initSelect("SelectElements", "@Model.Collection.SelectElements[i].Name", html, @Model.Collection.SelectElements[i].OptionElements.Count());
    }

    function initSelect(element, name, select, count) {
        let div = document.createElement("div");
        div.classList.add('row');
        div.classList.add('mt-2');
        div.innerHTML = "<input type=\"hidden\" name=\"CountSelect\" value=\"" + count + "\" /> " +
            "<label class=\"col-6 col-md-3 mt-2\">@Localizer["FieldName"]: </label>" +
            "<input type=\"text\" name=\"SelectField\" class=\"form-control col-6 col-md-3\" autocomplete=\"off\" value=\"" + name + "\"/> " +
            "<label class=\"col-6 col-md-3 mt-2\">@Localizer["SelectElement"]: </label>" + select;
        document.getElementById(element).appendChild(div);
    }

    function addInput(e) {
        let div = document.createElement("div");
        div.classList.add('row');
        div.classList.add('col-12');
        div.classList.add('p-0');
        div.innerHTML = "<div class=\"col-6 col-md-9\"></div><input type =\"text\" name=\"Options\" class=\"form-control col-5 col-md-2\" autocomplete=\"off\"/>" +
            "<div class=\"col-1 col-md-1 text-center\"><button class=\"btn pl-0 text-danger\" onclick='deleteElement(event)'>x</button></div>";
        let parentDiv = (((e.target).parentElement).parentElement).parentElement;
        (parentDiv).insertBefore(div, (parentDiv).firstChild);
        let inputSelect = (((parentDiv).parentElement).parentElement).firstChild;
        inputSelect.value = parseInt(inputSelect.value) + 1;
    }


    @for (int i = 0; i < Model.Collection.NameElements.Count(); i++)
    {
        @: appendElement("NameElements", "@Model.Collection.NameElements[i].Name", "@Model.Collection.NameElements[i].Type");
    }

    function appendElement(element, name, type) {
        let div = document.createElement("div");
        div.classList.add('row');
        div.classList.add('mt-2');
        div.innerHTML = "<label class=\"col-6 col-md-3 mt-2\">@Localizer["FieldName"]: </label>" +
            "<input type=\"text\" name=\"NameFields\" class=\"form-control col-6 col-md-3\" value=\"" +
            name + "\" autocomplete=\"off\"/>" + getInputFieldForNameElement(type);
        document.getElementById(element).appendChild(div);
    }

    function getInputFieldForNameElement(type) {
        let html = "<label class=\"col-6 col-md-3 mt-2\">@Localizer["FieldType"]: </label>" +
            "<div class=\"col-5 col-md-2 pr-0\"><select name=\"Types\" class=\"select custom-select col-12\" style=\"margin-left: -15px\">";
        let elements = new Array();
        let i = 0;
        @foreach (var item in Enum.GetValues(typeof(TypeField)))
        {
            @: elements[i] = "@item";
            @: i++;
        }
        for (i = 0; i < elements.length; i++) {
            html += "<option value=\"" + elements[i] + "\" ";
            if (elements[i] === type)
                html += "selected"
            html += " >" + elements[i] + "</option>";
        }
        html += "</select></div><div class=\"col-1 col-md-1 text-md-right\"><button class=\"btn pl-0 text-danger\" onclick='deleteElement(event)'>X</button></div>";
        return html;
    }

    function deleteElement(e) {
        (((e.target).parentElement).parentElement).remove();
    }

    function handleFilesClick(e) {
        let files = e.target.files;
        for (let i = 0; i < files.length; i++) {
            let file = files[i]

            var img = document.createElement("img");
            img.classList.add("img-thumbnail");
            img.file = file;

            let div = document.createElement("div");
            div.innerHTML = "<div id = \"dropZone\" onclick = \"fileUpload.click()\" ondrop = \"dropHandler(event, fileUpload)\" ondragover = \"dragOverHandler(event)\" ondragleave = \"dragLeaveHandler(event)\" ></div >";

            div.firstChild.appendChild(img);

            let parent = e.target.parentElement;
            for (let i = 0; i < parent.children.length; i++) {
                if (parent.children[i].tagName === "DIV") {
                    parent.removeChild(parent.children[i]);
                }
            }
            parent.appendChild(div);

            let reader = new FileReader();
            reader.onload = (function (aImg) { return function (e) { aImg.src = e.target.result; }; })(img);
            reader.readAsDataURL(file);
        }
    }
</script>
